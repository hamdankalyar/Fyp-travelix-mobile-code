import { Pressable, ScrollView, StyleSheet, Text, View, Alert, Modal } from "react-native";
import React, { useContext, useEffect, useState } from "react";
import CarCard from "../../components/card/ModuleCards/CarCards";
import BookingInputCard from "../../components/card/BookingInputCard";
import PriceDetailsCard from "../../components/card/PriceDetailsCard";
import BankCard from "../../components/card/BankCard";
import LargeButton from "../../ui/LargButton";
import UserDetailsCard from "../../components/card/UserDetailCard";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { CardField, useConfirmPayment } from "@stripe/stripe-react-native";

const API_URL = "http://192.168.18.41:3000";
const MyBookingScreen = ({ route, navigation }) => {
  const { place } = route.params;
  const [modalVisible, setModalVisible] = useState(false);
  const [stripeCardDetails, setStripeCardDetails] = useState();
  const [cardDetails, setCardDetails] = useState();
  const { confirmPayment, loading } = useConfirmPayment();
  const [finalObj, setFinalObj] = useState({
    user: '',
    bookedItem: {
      item: '', // You might have an initial value for the item
      price: 0, // You might have an initial value for the price
      bookingDate: {
        startDate: '',
        finishDate: '',
      },
    },
    bookedUserInfo: {
      fullName: '', // Add all fields that will come from UserDetailsCard
      cnicNumber: '',
    },

  },
  );

  const [startDate, setStartDate] = useState(new Date());
  const [endDate, setEndDate] = useState(new Date());
  const [rentDays, setRentDays] = useState('1')
  const [userDetails, setUserDetails] = useState({

    cnicNumber: '',
    phoneNumber: '',
  });

  const handleSetUserDetails = (details) => {
    setUserDetails(details);
    console.log('User Details Saved:', details);
    setFinalObj((prevFinalObj) => ({
      ...prevFinalObj,
      bookedItem: {
        ...prevFinalObj.bookedItem,
      },
      bookedUserInfo: {
        ...prevFinalObj.bookedUserInfo,
        cnicNumber: details.cnicNumber,
        // phoneNumber: details.phoneNumber,
      },
    }));

    console.log('Final Object:', finalObj);
  };

  const handleDatesChange = (startDate, endDate) => {
    setStartDate(startDate);
    setEndDate(endDate);
    setFinalObj((prevFinalObj) => ({
      ...prevFinalObj,
      bookedItem: {
        ...prevFinalObj.bookedItem,
        bookingDate: {
          startDate,
          finishDate: endDate,
        },
      },
    }));
  };

  const handlePriceChange = (newPrice) => {
    setFinalObj((prevFinalObj) => ({
      ...prevFinalObj,
      bookedItem: {
        ...prevFinalObj.bookedItem,
        price: newPrice,
      },
    }));
  };
  useEffect(() => {
    console.log('Final Object here:', finalObj);
    console.log("Rentdays", rentDays)
    console.log("Stripe Card Details", stripeCardDetails);
  }, [finalObj, rentDays, stripeCardDetails])

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const userDataString = await AsyncStorage.getItem('UserData');
        if (userDataString) {
          const parsedUserData = JSON.parse(userDataString);
          console.log("Retrieved UserData", parsedUserData);



          setFinalObj({
            user: parsedUserData.data._id, // Make sure this path matches the actual data structure
            bookedItem: {
              item: place._id, // Uncomment and use actual ID

            },
            bookedUserInfo: {
              fullName: parsedUserData.data.name, // Make sure this path matches the actual data structure
            },
            paymentType: "Credit Card",
          }
          );
        }
      } catch (e) {
        console.error('Failed to fetch or parse UserData', e);
      }
    };

    fetchUserData();
  }, []); // The empty array ensures this effect runs once on mount


  const onpress = () => {
    navigation.navigate("StripeTest");
  };
  const handlePaymentSubmission = async () => {
    if (!stripeCardDetails.complete) {
      Alert.alert("Please enter complete card details");
      return;
    }
    // Continue with payment processing...
  };
  const closeModal = () => {
    setModalVisible(false);
  };
  const handleModalContentPress = (event) => {
    // Prevents the press event from reaching the overlay
    event.stopPropagation();
  };

  //payment all code 
  const fetchPaymentIntentClientSecret = async () => {
    const requestBody = {
      ...finalObj,
      paymentType: "Card",
      paymentMethod: {
        id: stripeCardDetails?.paymentMethodId,
        last4: '4242',
        brand: 'visa'
      }
    };

    try {
      const response = await fetch(`${API_URL}/api/vehicle/booking/mobile`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        throw new Error(`Network response was not ok: ${response.statusText}`);
      }

      const jsonResponse = await response.json();
      return jsonResponse; // Directly return the parsed JSON response
    } catch (error) {
      console.error('Error fetching client secret:', error);
      Alert.alert('Error', error.message);
      return null; // Return null to indicate failure
    }
  };

  const handlePayPress = async () => {
    if (!stripeCardDetails?.complete) {
      Alert.alert('Error', 'Please enter complete card details.');
      return;
    }
    const billingDetails = {
      email: "hamdan@cui.com", // Include the email in the billing details
    };

    try {
      const response = await fetchPaymentIntentClientSecret();
      if (response?.error) {
        console.log('Unable to process payment:', response.error);
        Alert.alert('Payment Error', response.error);
        return;
      }

      const { clientSecret } = response;
      const { paymentIntent, error } = await confirmPayment(clientSecret, {
        paymentMethodType: 'Card',
        billingDetails: billingDetails,
      });

      if (error) {
        console.log('Payment confirmation error:', error);
        Alert.alert('Payment Error', error.message);
      } else {
        Alert.alert('Success', 'Payment Successful');
        console.log('Payment successful', paymentIntent);
      }
    } catch (e) {
      console.error(e);
      Alert.alert('Payment Error', 'An unexpected error occurred');
    }
  };
  return (
    <View
      style={{
        paddingBottom: 25,
      }}
    >
      <View style={styles.container}>

        <Modal
          animationType="slide"
          transparent={true}
          visible={modalVisible}
          onRequestClose={() => {
            Alert.alert("Modal has been closed.");
            setModalVisible(!modalVisible);
          }}
          style={styles.modal}
        >
          <Pressable style={styles.modalOverlay} onPress={closeModal}>
            <View style={styles.centeredView}>
              <Pressable style={styles.modalView} onPress={handleModalContentPress}>

                <Pressable style={styles.closeIcon} onPress={closeModal}>
                  <Text style={styles.closeIconText}>X</Text>
                </Pressable>
                <Text style={styles.modalText}>Enter Card Details</Text>
                <CardField
                  postalCodeEnabled={true}
                  placeholder={{
                    number: "4242 4242 4242 4242",
                  }}
                  cardStyle={styles.card}
                  style={styles.cardContainer}
                  onCardChange={cardDetails => {
                    setStripeCardDetails(cardDetails);
                  }}
                />

              </Pressable>
            </View>

          </Pressable>
        </Modal>

      </View>
      <ScrollView>
        {place && (
          <View style={styles.cardStyle}>
            <CarCard cardData={[place]} />
          </View>
        )}
        <UserDetailsCard setUserDetail={handleSetUserDetails} />
        <BookingInputCard
          onDatesChange={handleDatesChange}
          onPriceChange={handlePriceChange}
          place={place} // You need to pass the place object here as well
          setRentDaysFunc={setRentDays}
        />
        <PriceDetailsCard rentDays={rentDays} price={place.price} />
        <BankCard navigation={navigation} setModalVisible={setModalVisible} />

        <Pressable style={styles.button} onPress={handlePayPress}>
          <Text>Pay Now</Text>
        </Pressable>
        <LargeButton text="Proceed" onPress={onpress} />

      </ScrollView>
    </View >
  );
};

export default MyBookingScreen;
const styles = StyleSheet.create({
  cardStyle: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  button: {
    marginTop: 20,
    width: "90%",
    alignSelf: "center",
  },
  centeredView: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    marginTop: 22
  },
  modalView: {
    margin: 20,
    backgroundColor: "white",
    borderRadius: 20,
    padding: 35,
    alignItems: "center",
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
    width: '80%', // Set the width to 80% of the screen width
    alignSelf: 'center', // Center the modal view horizontally
  },
  cardContainer: {
    height: 50,
    width: '100%', // Ensure the CardField takes the full width of the modal
    backgroundColor: "white", // Set a contrasting background color
    marginVertical: 20,
  },
  card: {
    // Remove backgroundColor or set it to a contrasting color other than black
    color: 'black', // Set text color if necessary
  },
  buttonClose: {
    backgroundColor: "#2196F3",
  },
  textStyle: {
    color: "white",
    fontWeight: "bold",
    textAlign: "center"
  },
  modalText: {
    marginBottom: 15,
    textAlign: "center"
  },

  modal: {
    width: "100%",
    flex: 1,
    height: "100%",
  },
  closeIcon: {
    position: 'absolute',
    top: 10,
    right: 10,
    padding: 10
  },
  closeIconText: {
    fontSize: 20,
    fontWeight: 'bold'
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.5)" // Semi-transparent background
  },
});
